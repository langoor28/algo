#include <iostream>
#include <vector>
#include <stack>
#include <unordered_set>

using namespace std;

// Graph node structure
struct Node {
    int data;
    vector<Node*> neighbors;

    Node(int val) : data(val) {}
};

// Function to perform Depth-First Search
void DFS(Node* start) {
    if (!start) return;

    stack<Node*> stk;
    unordered_set<Node*> visited;

    stk.push(start);
    visited.insert(start);

    while (!stk.empty()) {
        Node* current = stk.top();
        stk.pop();

        // Process current node
        cout << current->data << " ";

        // Process neighbors
        for (Node* neighbor : current->neighbors) {
            if (visited.find(neighbor) == visited.end()) {
                stk.push(neighbor);
                visited.insert(neighbor);
            }
        }
    }
}

int main() {
    // Creating a sample graph
    Node* node1 = new Node(1);
    Node* node2 = new Node(2);
    Node* node3 = new Node(3);
    Node* node4 = new Node(4);
    Node* node5 = new Node(5);

    node1->neighbors = {node2, node3};
    node2->neighbors = {node4};
    node3->neighbors = {node4, node5};
    node4->neighbors = {node5};
    node5->neighbors = {};

    // Perform DFS from node1
    cout << "Depth-First Traversal: ";
    DFS(node1);

    // Free memory
    delete node1;
    delete node2;
    delete node3;
    delete node4;
    delete node5;

    return 0;
}
