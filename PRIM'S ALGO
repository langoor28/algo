#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

// Graph edge structure
struct Edge {
    int dest;
    int weight;

    Edge(int d, int w) : dest(d), weight(w) {}
};

// Function to find the minimum spanning tree using Prim's algorithm
vector<Edge> primMST(const vector<vector<Edge>>& graph) {
    int V = graph.size();

    // Priority queue to store vertices with their key values
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

    // Vector to store parent of each vertex in MST
    vector<int> parent(V, -1);

    // Vector to store key values of vertices
    vector<int> key(V, INT_MAX);

    // Vector to store whether a vertex is included in MST or not
    vector<bool> inMST(V, false);

    // Initialize the first vertex as the root
    key[0] = 0;
    pq.push({0, 0}); // {key, vertex}

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        inMST[u] = true;

        // Update key values of adjacent vertices of the picked vertex
        for (const Edge& edge : graph[u]) {
            int v = edge.dest;
            int weight = edge.weight;

            if (!inMST[v] && weight < key[v]) {
                parent[v] = u;
                key[v] = weight;
                pq.push({key[v], v});
            }
        }
    }

    // Construct MST edges from parent array
    vector<Edge> MST;
    for (int i = 1; i < V; ++i) {
        MST.push_back(Edge(i, parent[i]));
    }

    return MST;
}

int main() {
    // Example graph representation as adjacency list
    vector<vector<Edge>> graph = {
        {{1, 5}, {2, 6}, {3, 2}},
        {{0, 5}, {2, 3}, {4, 7}},
        {{0, 6}, {1, 3}, {3, 8}, {4, 9}},
        {{0, 2}, {2, 8}, {4, 6}},
        {{1, 7}, {2, 9}, {3, 6}}
    };

    vector<Edge> MST = primMST(graph);

    cout << "Edges in the Minimum Spanning Tree:\n";
    for (const Edge& edge : MST) {
        cout << edge.dest << " - " << edge.weight << " - " << edge.dest << endl;
    }

    return 0;
}
