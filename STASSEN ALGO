#include <iostream>
#include <vector>

using namespace std;

// Function to multiply two matrices using the Strassen algorithm
vector<vector<int>> strassenMultiply(const vector<vector<int>>& A, const vector<vector<int>>& B) {
    int n = A.size();
    vector<vector<int>> C(n, vector<int>(n, 0));

    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
    } else {
        int newSize = n / 2;
        
        // Divide matrices into submatrices
        vector<vector<int>> A11(newSize, vector<int>(newSize));
        vector<vector<int>> A12(newSize, vector<int>(newSize));
        vector<vector<int>> A21(newSize, vector<int>(newSize));
        vector<vector<int>> A22(newSize, vector<int>(newSize));
        
        vector<vector<int>> B11(newSize, vector<int>(newSize));
        vector<vector<int>> B12(newSize, vector<int>(newSize));
        vector<vector<int>> B21(newSize, vector<int>(newSize));
        vector<vector<int>> B22(newSize, vector<int>(newSize));
        
        // Populate submatrices
        for (int i = 0; i < newSize; ++i) {
            for (int j = 0; j < newSize; ++j) {
                A11[i][j] = A[i][j];
                A12[i][j] = A[i][j + newSize];
                A21[i][j] = A[i + newSize][j];
                A22[i][j] = A[i + newSize][j + newSize];
                
                B11[i][j] = B[i][j];
                B12[i][j] = B[i][j + newSize];
                B21[i][j] = B[i + newSize][j];
                B22[i][j] = B[i + newSize][j + newSize];
            }
        }
        
        // Perform matrix multiplications recursively
        vector<vector<int>> M1 = strassenMultiply(A11, B11);
        vector<vector<int>> M2 = strassenMultiply(A12, B21);
        vector<vector<int>> M3 = strassenMultiply(A11, B12);
        vector<vector<int>> M4 = strassenMultiply(A12, B22);
        vector<vector<int>> M5 = strassenMultiply(A21, B11);
        vector<vector<int>> M6 = strassenMultiply(A22, B21);
        vector<vector<int>> M7 = strassenMultiply(A21, B12);
        vector<vector<int>> M8 = strassenMultiply(A22, B22);
        
        // Calculate submatrices of result
        vector<vector<int>> C11(newSize, vector<int>(newSize));
        vector<vector<int>> C12(newSize, vector<int>(newSize));
        vector<vector<int>> C21(newSize, vector<int>(newSize));
        vector<vector<int>> C22(newSize, vector<int>(newSize));
        
        for (int i = 0; i < newSize; ++i) {
            for (int j = 0; j < newSize; ++j) {
                C11[i][j] = M1[i][j] + M2[i][j];
                C12[i][j] = M3[i][j] + M4[i][j];
                C21[i][j] = M5[i][j] + M6[i][j];
                C22[i][j] = M7[i][j] + M8[i][j];
            }
        }
        
        // Merge submatrices into result
        for (int i = 0; i < newSize; ++i) {
            for (int j = 0; j < newSize; ++j) {
                C[i][j] = C11[i][j];
                C[i][j + newSize] = C12[i][j];
                C[i + newSize][j] = C21[i][j];
                C[i + newSize][j + newSize] = C22[i][j];
            }
        }
    }

    return C;
}

int main() {
    // Example usage
    vector<vector<int>> A = {{1, 2, 3, 4},
                              {5, 6, 7, 8},
                              {9, 10, 11, 12},
                              {13, 14, 15, 16}};
                              
    vector<vector<int>> B = {{17, 18, 19, 20},
                              {21, 22, 23, 24},
                              {25, 26, 27, 28},
                              {29, 30, 31, 32}};
                              
    vector<vector<int>> C = strassenMultiply(A, B);

    // Print the result matrix
    for (const auto& row : C) {
        for (int num : row) {
            cout << num << " ";
        }
        cout << endl;
    }

    return 0;
}
