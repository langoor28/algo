#include <iostream>
#include <vector>
#include <queue>
#include <unordered_set>

using namespace std;

// Graph node structure
struct Node {
    int data;
    vector<Node*> neighbors;
    
    Node(int d) : data(d) {}
};

// BFS traversal function
void BFS(Node* start) {
    if (start == nullptr) return;

    queue<Node*> q;
    unordered_set<Node*> visited;

    q.push(start);
    visited.insert(start);

    while (!q.empty()) {
        Node* current = q.front();
        q.pop();

        // Process current node
        cout << current->data << " ";

        // Enqueue neighbors of current node
        for (Node* neighbor : current->neighbors) {
            if (visited.find(neighbor) == visited.end()) {
                q.push(neighbor);
                visited.insert(neighbor);
            }
        }
    }
}

int main() {
    // Creating a sample graph
    Node* node1 = new Node(1);
    Node* node2 = new Node(2);
    Node* node3 = new Node(3);
    Node* node4 = new Node(4);
    Node* node5 = new Node(5);

    // Connecting nodes to form a graph
    node1->neighbors.push_back(node2);
    node1->neighbors.push_back(node3);
    node2->neighbors.push_back(node4);
    node3->neighbors.push_back(node4);
    node3->neighbors.push_back(node5);
    node4->neighbors.push_back(node5);

    // Perform BFS starting from node1
    cout << "BFS traversal: ";
    BFS(node1);
    cout << endl;

    // Clean up dynamically allocated memory
    delete node1;
    delete node2;
    delete node3;
    delete node4;
    delete node5;

    return 0;
}
