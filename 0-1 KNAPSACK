#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Structure to represent an item
struct Item {
    int weight;
    int value;

    Item(int w, int v) : weight(w), value(v) {}
};

// Function to solve the 0-1 knapsack problem
int knapsack(int W, const vector<Item>& items) {
    int n = items.size();
    vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));

    for (int i = 1; i <= n; ++i) {
        for (int w = 1; w <= W; ++w) {
            if (items[i - 1].weight <= w) {
                dp[i][w] = max(dp[i - 1][w], items[i - 1].value + dp[i - 1][w - items[i - 1].weight]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    return dp[n][W];
}

int main() {
    int W = 50; // Knapsack capacity
    vector<Item> items = {
        {10, 60},
        {20, 100},
        {30, 120}
    };

    int max_value = knapsack(W, items);
    cout << "Maximum value that can be obtained: " << max_value << endl;

    return 0;
}
